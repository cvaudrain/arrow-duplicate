{"version":3,"sources":["Components/Header.jsx","Components/Footer.jsx","Components/Note.jsx","Components/CreateArea.jsx","Components/NoteEditor.jsx","Components/Auth.jsx","Components/PracticeRoute.jsx","Components/App.jsx","index.js"],"names":["Header","props","className","headerText","userNameGreeting","to","onClick","logout","Footer","Date","getFullYear","Note","handleEdit","event","onEdit","id","title","content","onDelete","CreateArea","useState","note","setNote","handleChange","target","name","value","prevNote","console","log","onChange","placeholder","autoComplete","onKeyDown","keyCode","document","getElementById","click","type","row","length","onAdd","preventDefault","NoteEditor","populateId","populateTitle","populateContent","editedNote","setEditedNote","style","height","width","onEditSubmit","Auth","authStatus2","setAuthStatus2","failedAttempt","setFailedAttempt","failedReg","setFailedReg","usernameTaken","setUsernameTaken","email","password","credentials","setCredentials","isRegistered","setIsRegistered","preVal","toggleReg","path","src","method","required","axios","post","then","res","data","retrievedNotes","retrievedEmail","authStatusBool","authenticated","retrievedUsername","userData","username","notes","authStatus","reset","JSON","stringify","sessionStorage","setItem","authFunction","isValid","passwordPassed","emailPassed","isEmail","lower","test","upper","num","len","validation","error","undefined","PracticeRoute","App","editModeStatus","setEditModeStatus","Id","Title","Content","selectedNote","setSelectedNote","getItem","sessionData","sessionStoredValue","parse","setNotes","setAuthStatus","usernameFromAuth","setUsernameFromAuth","emailFromAuth","setEmailFromAuth","deleteNote","prevNotes","filter","noteItem","index","editNote","get","req","clear","useEffect","userEmail","history","from","loginStatusBoolFromAuth","valuePassedFromAuth","userProfile","edited","shallowCopy","map","entry","newNote","tempArr","forEach","push","key","ReactDOM","render"],"mappings":"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","file":"static/js/main.c11beb7b.chunk.js","sourcesContent":["import React from \"react\"\r\nimport {BrowserRouter, Link} from \"react-router-dom\"\r\n\r\nfunction Header(props){\r\n    \r\n    return (\r\n    <header>\r\n<p className=\"indigo\">{props.headerText}</p> <h3 className=\"greeting\">Hello, {props.userNameGreeting}</h3>\r\n<Link to=\"/authenticate\">\r\n<button onClick={props.logout} className=\"logout-button align-r\" >Logout</button>\r\n</Link>\r\n    </header>\r\n    )\r\n}\r\n\r\nexport default Header","import React from \"react\"\r\n\r\nfunction Footer(){\r\n    let currYear = new Date().getFullYear();\r\n    return (\r\n    <footer>\r\n        <p></p>\r\n    </footer>\r\n    )\r\n}\r\n\r\nexport default Footer","import React from \"react\";\r\n\r\nfunction Note(props) {\r\n\r\n  function handleClick(){\r\n    props.onDelete(props.id)\r\n  }\r\n  function handleEdit(event){\r\n    props.onEdit(props.id, props.title, props.content)\r\n\r\n  }\r\n  \r\n  return (\r\n    <div className=\"note\">\r\n\r\n      <h1 onClick={handleEdit} >{props.title}</h1>\r\n      <p onClick={handleEdit} >{props.content}</p>\r\n    \r\n      <button onClick={handleClick}>DELETE</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Note;","import {useState} from \"react\"\r\nimport React from \"react\"\r\nlet noteValue;\r\n\r\n\r\nfunction CreateArea(props){\r\n\r\n    const [note,setNote] = useState({\r\n        id: \"\",\r\n        title: \"\",\r\n        content: \"\"\r\n    })\r\n   \r\n\r\n \r\n    function handleChange(event){\r\n        //name is either title or content. value is the \r\n        //string value for text or content, whichever is being edited\r\n        const {name,value} = event.target;\r\n        setNote(prevNote=> {\r\n            return {\r\n                ...prevNote,\r\n                [name]: value\r\n            }\r\n        })\r\n        console.log(value)\r\n      \r\n    }\r\n\r\n    function submitNote(event){\r\n        if(note.title.length == 0 && note.content.length==0){\r\n            console.log(\"detecting EMPTY NOTE\")\r\n            return\r\n        }\r\n        props.onAdd(note)\r\n       noteValue = note;\r\n        setNote({\r\n            id: \"\",\r\n            title:\"\",\r\n            content: \"\"\r\n        })\r\n       \r\n        event.preventDefault();  //stops reload on submission of form\r\n    }\r\n\r\n    function submitOnEnter(event){\r\n        event.keyCode === 13 && document.getElementById(\"submitButton\").click()\r\n    }\r\n   \r\n    \r\n    return (\r\n        <div>\r\n            <form>\r\n                <input onChange={handleChange}\r\n                 name=\"title\" value={note.title}\r\n                  placeholder=\"Title\"\r\n                   autoComplete=\"off\"/>\r\n                <textarea onKeyDown= {submitOnEnter} \r\n                type=\"submit\" onChange={handleChange}\r\n                 name=\"content\" value={note.content}\r\n                  placeholder=\"Take a Note\"\r\n                   row=\"3\"\r\n                    autoComplete=\"off\"/>\r\n                <button id=\"submitButton\" onClick={submitNote}>Add</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreateArea\r\nexport {noteValue}","import {useContext, useState} from \"react\"\r\nimport React from \"react\"\r\nimport Header from \"./Header\";\r\n\r\nfunction NoteEditor(props){\r\n    // const selectedContext = React.createContext(props.context)\r\n\r\n    // import App, {id,title,content} from \"./App\";\r\n    const [editedNote,setEditedNote] = useState({\r\n        id: props.populateId,\r\n        title: props.populateTitle,\r\n        content: props.populateContent\r\n    })\r\n \r\n//set fullscreen\r\n const editorStyle = {\r\n    height: \"60vh\",\r\n    width: \"90vw\"\r\n    }\r\n    const textAreaStyle = {\r\n        height: \"50vh\",\r\n        width: \"80vw\"\r\n        }\r\n\r\n        //UPDATE editedNote with every change to input\r\n    function handleEdit(event){\r\n\r\n        //name is either title or content. value is the \r\n        //string value for text or content, whichever is being edited\r\n        //prevNote will hold value for unedited value. setting new \r\n        //key/value pair will overwrite the existing one with same key. \r\n        const {name,value} = event.target;\r\n        setEditedNote(prevNote=> {\r\n            return {\r\n                ...prevNote,\r\n                [name]: value\r\n            }\r\n        })\r\n        console.log(name)\r\n        console.log(value)\r\n    }\r\n\r\n    //SUBMIT editedNote to app.js for array map, update, and render\r\n    function submitEditedNote(event){ \r\n        \r\n        props.onEditSubmit(editedNote) //passes editedNote into editComplete\r\n        //inside App.js via this prop, which brings editedNote as arg here\r\n\r\n       //below RESETS setEdited Note to empty, so thisstate can be\r\n       //used to edit other noptes in future. \r\n        setEditedNote({\r\n            id: \"\",\r\n            title:\"\",\r\n            content: \"\"\r\n        })\r\n        event.preventDefault();  //stops reload on submission of form\r\n    }\r\n\r\n    function submitOnEnter(event){\r\n        event.keyCode === 13 && document.getElementById(\"updateButton\").click()\r\n    }\r\n    return(\r\n        <div>\r\n        \r\n            <form style={editorStyle} >\r\n                <input onChange={handleEdit} name=\"title\" value={editedNote.title} placeholder=\"Title\" autoComplete=\"off\"/>\r\n                <textarea onKeyDown={submitOnEnter} type=\"submit\" style={textAreaStyle} onChange={handleEdit} name=\"content\" value={editedNote.content} placeholder=\"Take a Note\" row=\"3\" autoComplete=\"off\"/>\r\n                <button id=\"updateButton\"onClick={submitEditedNote}>Save</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default NoteEditor","import React, {useState, useContext, useEffect} from \"react\";\r\nimport axios from \"axios\"\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link,\r\n    Redirect,\r\n    useHistory,\r\n    useLocation,\r\n    withRouter\r\n  } from \"react-router-dom\";\r\n\r\n  import isEmail from \"validator/lib/isEmail\"\r\n\r\n  import {createBrowserHistory} from \"history\"\r\n// let history = createBrowserHistory()\r\n\r\nimport Header from \"./Header\";\r\nimport Footer from \"./Footer\";\r\nimport SubmitButton from \"./SubmitButton\"\r\n \r\n\r\n\r\nfunction Auth(props){\r\n    let [authStatus2, setAuthStatus2] = useState(false) //logged in/ !logged in\r\n    const [failedAttempt, setFailedAttempt] = useState(false) // incorrect login registered\r\n    const [alreadyRegistered, setAlreadyRegistered] = useState(false)\r\n    const [failedReg, setFailedReg] = useState(false) \r\n    const [usernameTaken, setUsernameTaken] = useState(false)\r\n    // console.log(props)\r\n    // console.log(authStatus) DOES NOT RECOGNIZE AUTHSTATUS\r\nconst [credentials, setCredentials] = useState({\r\n    name:\"\",\r\n    email: \"\",\r\n    password: \"\"\r\n})\r\n\r\n    const [credentialsReg,setCredentialsReg] = useState({\r\n        name: \"\",\r\n        email: \"\",\r\n        password: \"\"\r\n    })\r\n\r\n    const [isRegistered,setIsRegistered] = useState(true); //defaults to case of returning user\r\n    \r\n    function handleChange(event){\r\n        const {name,value} = event.target; //name/value are the html keys name = and value =\r\nsetCredentials(preVal=>{\r\n    return {\r\n        ...preVal,\r\n        [name]: value\r\n    }\r\n})\r\nconsole.log(credentials)\r\n    }\r\n\r\n    function validation(email,password) { //ensure pass and email meet requirements before continuing.\r\n        let emailPassed=isEmail(email) //from validator node package isEmail\r\n        let passwordPassed;\r\n        var lower = /[a-z]/.test(password)\r\n        var upper = /[A-Z]/.test(password)\r\n        var num = /\\d/.test(password)\r\n        // var invalid = /\\W/.test(password)\r\n        var len = password.length\r\n         if(lower == true && upper == true && num == true /*&& invalid == false*/ && len>=6){\r\n             passwordPassed = true\r\n         }\r\n         else{passwordPassed = false}\r\n         if(emailPassed && passwordPassed){\r\n             console.log(\"validation PASSED\")\r\n             return true\r\n         } else{\r\n             console.log(\"validation FAILED\")\r\n             console.log(passwordPassed)\r\n             console.log(emailPassed)\r\n             return false\r\n         }\r\n        }\r\n\r\n    function registerSubmission(event){\r\n        let isValid = validation(credentials.email, credentials.password) //run email and pass through validation function before continuing.\r\n\r\n        if (isValid === true){\r\naxios.post(\"/api/registerUser\",credentials)\r\n.then((res)=>{\r\n    // console.log(\"credentials returned: \" + res.data.name + \" \" + res.data.email + \" \" + res.data.password + \" \" + res.data.authenticated)\r\n            console.log(res.data)\r\n        let authStatusBool = res.data.authStatus //if user is already registered or not\r\n        let retrievedEmail= res.data.email\r\n        let retrievedUsername = res.data.username\r\n\r\n               \r\n\r\n //= { //sessionStorage to be set on registration\r\n//             username: retrievedUsername,\r\n//             notes: [],\r\n//             email: retrievedEmail,\r\n//             authStatus: authStatusBool\r\n//         }\r\n//         userData = JSON.stringify(userData) //ready for session storage as JSON format\r\n\r\n//         sessionStorage.setItem(\"userData\", userData) //obj key must be string format going in to match JSON format.\r\n\r\n//         setAlreadyRegistered(res.data.alreadyRegistered)\r\nsetAuthStatus2(res.data.authStatus) //THIS causes re-render\r\n//CLEANUP ERROR after registration fixed here. We were saying authStatus2 instead of authStatusBool. And authStatus2 is stateful, and not ready to be evaluated.\r\n//Refreshing window.location.reload() would also work because we had sessionStorage, but this is better.\r\nauthStatusBool && props.authFunction(res.data.authStatus, [], res.data.username, res.data.email) //don't use authStatusBool, use the direct response value res.data.authenticated\r\n!res.data.authStatus && setFailedReg(true) \r\nres.data.authStatus && setFailedReg(false)\r\nlet userData;\r\nif(res.data.authStatus){\r\n     userData = JSON.stringify(res.data)\r\n     sessionStorage.setItem(\"userData\",userData)\r\n    }\r\n\r\n\r\nlet nameError;\r\nif(res.data.error != null && res.data.error.name != undefined){\r\n    nameError = res.data.error.name\r\n}else{\r\n    nameError=\"none\"\r\n}\r\nnameError == \"UserExistsError\" && setUsernameTaken(true)\r\n})\r\n\r\n        } else if(isValid === false){\r\n            setFailedReg(true)\r\n            document.getElementById(\"authForm\").reset()\r\n        }\r\n\r\n        event.preventDefault() //prevents \"cannot POST\" error\r\n    }\r\n\r\n    \r\n\r\n    function submission(event){\r\n        console.log(\"submission function\")\r\n        axios.post(\"/api/authenticate\",credentials)\r\n        .then((res)=>{\r\n            \r\n            console.log(res.data)\r\n            console.log(res.data.retrievedNotes)\r\n            let retrievedEmail= res.data.retrievedEmail\r\n        // let enteredPassword = res.data.password\r\n        let authStatusBool = res.data.authenticated\r\n        let retrievedNotes = res.data.retrievedNotes\r\n        let retrievedUsername = res.data.retrievedUsername\r\n        \r\n        let userData = { \r\n            username: retrievedUsername,\r\n            notes: retrievedNotes,\r\n            email: retrievedEmail,\r\n            authStatus: authStatusBool\r\n        }\r\n        if(res.data == \"unsuccessful attempt\"){ //i.e failed login retains dummy values, but prevents empty sessionStorage\r\n            userData = {\r\n            username: \"nameless user\",\r\n            notes: [],\r\n            email: \"no email\",\r\n            authStatus: false\r\n            }\r\n            document.getElementById(\"authForm\").reset()\r\n            \r\n        }\r\n                        \r\n        userData = JSON.stringify(userData) //ready for session storage as JSON format\r\n\r\n        sessionStorage.setItem(\"userData\", userData) //obj key must be string format going in to match JSON format.\r\n         \r\n        setAuthStatus2(res.data.authenticated)\r\n!userData.authStatus && setFailedAttempt(true) //fires UI message\r\n\r\n//only fire this IF authStatusBool = true, so that we stay on auth page and can send users messages like \"incorrect login, try again..\"\r\n        authStatusBool && props.authFunction(authStatusBool,retrievedNotes,retrievedUsername,retrievedEmail,userData) /*THIS is how we pass data to main app(parent)\r\n        i.e LIFTING UP STATE WITH HOOKS & FUNCTIONAL COMPONENTS. Bc the internet wasn't helpful.\r\n                             the props.functionName is the prop in App.jsx, and is arbitrary\r\n                            but the ARGS we pass in though are DATA FROM THIS COMPONENT\r\n                             So the args in the prop function ARE passed over, and in App.jsx\r\n                             we'll have practiceFunction = {functionNameFromMainParentApp}\r\n                             which will accept the appropriate number of args in its function definition\r\n                             and will set state with setNotes(arg), and the arg will equal the arg passed here\r\n                             which is retreivedNotes, an ARRAY from our SERVER, which will ultimately be taken\r\n                             from QUERYING the DB on the serverside, awaiting query, then sending the retreived array\r\n                             with the other values with res.json(responseData), received here as res.data\r\n                             which we can deconstruct above as res.data.email, res.data.retreivedNotes, etc!\r\n                                    */\r\n\r\n//         props.practiceFunction([\r\n//             {\r\n//             title:\"prop title 1\",\r\n//             content: \"note content passed from Auth.jsx\"\r\n//         },\r\n//     {\r\n//         title: \"a second note title\",\r\n//         content: \"the function inside the submission function from Auth.jsx passed these replacement notes as props\"\r\n//     },\r\n//     {title: \"How?\",\r\n//     content: \"props.practiceFunction in Auth took 1 argument- an array with these 3 objects!\"\r\n// }\r\n// ])\r\n       \r\n        })\r\n       \r\n        event.preventDefault() //prevents \"cannot POST\" error\r\n    }\r\n\r\n    function toggleReg(){\r\n        isRegistered ? setIsRegistered(false) : setIsRegistered(true)\r\n        failedAttempt && setFailedAttempt(false) \r\n        setFailedReg(false)\r\n        setUsernameTaken(false)\r\n    }\r\n//kb event listener to submit credentials on enter \r\n    function keydownListener(event){\r\n        event.keyCode === 13 && document.getElementById(\"submitButton\").click()\r\n    }\r\n\r\n    return (\r\n        \r\n        <Route path=\"/authenticate\">\r\n       \r\n         {!authStatus2 ? console.log(\"not logged in yet\") : <Redirect to=\"/\" />}\r\n         \r\n        <div>\r\n        <header className=\"auth-header\">\r\n        <img className=\"arrow\" src=\"arrow.png\"></img>\r\n        {/* <h2 className = \"auth-header-text\">indigo</h2> */}\r\n        {/* <h3><i>A Growing Productivity Toolkit</i></h3> */}\r\n        </header>\r\n        <h1 className = \"auth-sub-heading\">{isRegistered ? \"Login\" : \"Register\"}</h1>\r\n        <form method=\"post\" className=\"auth-form\" id=\"authForm\">\r\n            \r\n            {!isRegistered && //extra field for name if unregistered\r\n            <input onChange={handleChange}\r\n            type=\"email\"\r\n            name=\"email\"\r\n            placeholder=\"Email\"\r\n             autoComplete=\"off\"\r\n                 className = \"auth-login-field\"\r\n                 required={true}\r\n             />\r\n            }\r\n            <input onChange={handleChange}\r\n            type=\"text\"\r\n            name=\"username\"\r\n            placeholder=\"Username\"\r\n             autoComplete=\"off\"\r\n                 className = \"auth-login-field\"\r\n                 required={true}\r\n             />\r\n\r\n            <input onChange={handleChange}\r\n            type=\"password\"\r\n            onKeyDown= {keydownListener}\r\n            name=\"password\"\r\n            placeholder=\"Password\" \r\n            autoComplete=\"off\"\r\n                className = \"auth-login-field\"\r\n                required={true}\r\n            />\r\n\r\n            \r\n            <button className=\"auth-login-btn\" \r\n            id=\"submitButton\" \r\n            onClick={isRegistered ? submission : registerSubmission}>Submit\r\n            </button>\r\n            \r\n        </form>\r\n        \r\n        \r\n{failedAttempt==true &&  <div className=\"errMessage centered\"><h4>Incorrect login... Let's try again.</h4></div>}\r\n{usernameTaken && <div className=\"errMessage centered\"><div><h2 className=\"br\">Username taken!</h2> It must be pretty cool. Try another one.</div></div>}\r\n{failedReg==true &&  <div className=\"errMessage centered\"><div><h2>Invalid credentials.</h2> <h3 className=\"br\">Please confirm that:</h3> <h5 className=\"br\">Password contains 1 uppercase letter</h5> <h5 className=\"br\">Password contains 1 lowercase letter</h5> <h5 className=\"br\">Password contains 1 number</h5> <h5 className=\"br\">Password is at least 6 characters long</h5> <h5 className=\"br\">Your email is not already registered</h5></div></div>}\r\n        \r\n        {isRegistered ? \r\n            <div className=\"register\">\r\n            <h3 className=\"regtext\"><i>First time here?</i></h3>\r\n            <button onClick= {toggleReg} className=\"to-register-btn\">Go Register</button>\r\n            </div>\r\n            :\r\n            <div className=\"register\">\r\n            <h3 className=\"regtext\"><i>Already registered?</i></h3>\r\n            <button onClick= {toggleReg} className=\"to-register-btn\"> Go to Login</button>\r\n          \r\n            </div>\r\n        }\r\n        <div className=\"about-arrow\">\r\n        <div><h1 className=\"about-header\">About Arrow...</h1></div>\r\n            <h2 className=\"paragraph\">Arrow is an ever-growing, productivity-focused web application to help you stay on target (pun 1/2). Developed as a personal project by a\r\n             new face in web development, Arrow is meant to serve as a cohesive collection of productivity apps for personal organization and task management.</h2> <h2 className=\"paragraph\">Launched\r\n             initially as a notetaking app, the Arrow collection is continually expanding to include more tools to help you keep life just a little more functional... \r\n             Arrow functional! (pun 2/2, for our fellow javascript enthusiasts).</h2> <h2 className=\"paragraph\">If you'd like to give it a try, rest assured you'll get no email spam from this app and your email will be used solely to secure your user experience. If there were too many puns and you'd rather not, that's also pretty valid.</h2> \r\n             <h2 className=\"paragraph\">As always, thanks a ton for stopping by and best wishes to all visitors!</h2>\r\n        </div>\r\n        </div>\r\n          </Route> \r\n    )\r\n}\r\n\r\nexport default Auth","import React, {useState, useContext, useEffect} from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route, Link, Redirect, useHistory } from \"react-router-dom\";\r\n\r\nfunction PracticeRoute(props){\r\nconsole.log(\"codeblock on PracticeRoute running\")\r\n    return (\r\n        <h1>A practice route</h1>\r\n    )\r\n}\r\n\r\nexport default PracticeRoute","import React, {useState, useContext, useEffect} from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route, Link, Redirect,useLocation, useHistory } from \"react-router-dom\";\r\n\r\n\r\nimport Header from \"./Header\";\r\nimport Footer from \"./Footer\";\r\nimport Note from \"./Note\";\r\nimport CreateArea from \"./CreateArea\";\r\nimport noteValue from \"./CreateArea\";\r\nimport NoteEditor from \"./NoteEditor\";\r\nimport Auth from \"./Auth\"\r\nimport axios from \"axios\";\r\n\r\nimport PracticeRoute from \"./PracticeRoute\"\r\n\r\n// import {createBrowserHistory} from \"history\"\r\n\r\n// let history = createBrowserHistory()\r\nfunction App() {\r\n  \r\n// console.log(history)\r\n  //State Declarations\r\n \r\n  const [editModeStatus,setEditModeStatus] = useState(false)\r\n  \r\n  const [selectedNote, setSelectedNote] = useState({\r\n    Id: \"\",\r\n    Title: \"\",\r\n    Content: \"\"\r\n  })\r\n//ACTUALLY declare ALL state variables that correspond with sessionStorage AFTER checking the sessionStorage value\r\n  //const [notes,setNotes] = useState([]) //lets declare notes AFTEr checking to see if sessionStorage exists, to avoid too many re-renders..\r\n  // const [authStatus,setAuthStatus] = useState(false)\r\n  // const [usernameFromAuth, setUsernameFromAuth] = useState(\"unauthenticated interloper\")\r\n  // const [emailFromAuth, setEmailFromAuth] = useState(\"no email\")\r\n\r\n  if(sessionStorage.getItem(\"userData\") === null){\r\n  sessionStorage.setItem(\"userData\",JSON.stringify({ //IF null, Initial set session storage. Values will be replaced ater successful auth\r\n    username: \"nameless user\",\r\n    notes: [],\r\n    email: \"no email\",\r\n    authStatus: false\r\n  })\r\n  )\r\n}\r\n  // Get Session-Dependent State \r\nlet sessionData = ()=>{\r\n  let sessionStoredValue= sessionStorage.getItem(\"userData\")\r\nif(sessionStoredValue.email !== \"no email\") { //i.e, if the initial values have been replaced by a user login action...\r\n   sessionStoredValue = sessionStorage.getItem(\"userData\")\r\n  console.log(\"sessionData variable is still available (line 34)\")\r\n  JSON.parse(sessionStoredValue)\r\n  console.log(sessionStoredValue)\r\n \r\n  return JSON.parse(sessionStoredValue)\r\n}\r\n    else {\r\n  console.log(\"sessionStorage NOT set correctly, currently storing dummy values\")\r\n  return { //this means sessionStorage wasn't set and/or retrieved correctly.\r\n    username: \"nameless user\",\r\n    notes: [],\r\n    email: \"no email\",\r\n    authStatus: false\r\n  }} //handle case with no session data so sessionData never undefined & always usable for initial set state\r\n}\r\n\r\nsessionData = sessionData() //seems to be returning undefined?\r\nconsole.log(\"sessiondata ====\")\r\nconsole.log(sessionData)\r\nconsole.log(sessionData.notes) //wasn't being parsed so was returning undefined!!!!!!!!!!!!!!!!!!!!!!\r\nconst [notes,setNotes] = useState(sessionData.notes) // declare notes HERE so page refresh will work without too many renders caused by re-setting it too many times in initial render.\r\nconsole.log(\"notes stateful ===\")\r\nconsole.log(notes)\r\nconst [authStatus,setAuthStatus] = useState(sessionData.authStatus)\r\n  const [usernameFromAuth, setUsernameFromAuth] = useState(sessionData.username)\r\n  const [emailFromAuth, setEmailFromAuth] = useState(sessionData.email)\r\n//setNotes(sessionData.notes)    //causes TOO MANY RE-RENDERS due to useEffect loop. \r\n// // sessionData = JSON.parse(sessionData)\r\n// const [notes,setNotes] = useState(sessionData.notes) //returns user notes array if \r\n// console.log(notes)\r\n// //set notes from sessionStorage\r\n// const [usernameFromAuth,setUsernameFromAuth] = useState(sessionData.username) //already parsed in function\r\n// console.log(usernameFromAuth)\r\n// // set username from sessionStorage\r\n// const [emailFromAuth, setEmailFromAuth] = useState(sessionData.email)\r\n// console.log(emailFromAuth)\r\n// //set email from sessionStorage to be used for DB queries to find and return user data to populate notes, username, etc.\r\n//   let [authStatus, setAuthStatus] = useState(/*false*/sessionData.authStatus) //uses react-router <Redirect /> to redirect to login if not logged in\r\n//   //set authStatus from sessionStorage\r\n \r\n//  useEffect(()=>{\r\n//    console.log(\"a user Data value changed. Re-rendering and updating sessionStorage to match\")\r\n//    let newSessionVals = {\r\n//      username: usernameFromAuth,\r\n//      notes: notes,\r\n//      email:emailFromAuth,\r\n//      authStatus:authStatus\r\n//    }\r\n//    newSessionVals = JSON.stringify(newSessionVals)\r\n//    sessionStorage.setItem(\"userData\",newSessionVals)\r\n//  },[authStatus, usernameFromAuth, emailFromAuth,notes])\r\n\r\n  \r\n\r\n\r\n  //handle GET/POST with Axios between client and server AXIOS EXPLAINED HERE:\r\n  //one url communicates with the server get request, the other with the post request\r\n  //the get request in server contains a DB query to return notes, which is caught by Axios here\r\n  //the post request on server will save() the notes array to db when we post it\r\n  //server get req listens on practiceNotes endpoint, the post listens on addNotes endpoint\r\n  /*Axios basically holds multiple endpoints to communicate with our server as if they're coming from different \r\n  endpoints, when they';re just here on the single page app. So in past projects there were different pages\r\n  with forms, inputs etc. We had a get and a post for each PAGE\r\n  Axios lets us work the same way, but all from one page, sending get and post requests with our server from inside each\r\n  useEffect call, which contains a set state call, and a res to the server with that newly set state\r\n  So with Axios, each useEffect is like its own page endpoint, just without leaving this page\r\n  We can use this the same way to get values from a login component that has a handlechange() and passes inputs as props,\r\n   then in App.jsx we set state to a user object, and have a new Axios useEffect that will send that to our server for \r\n   DB CRUD Ops*/\r\n  //AXIOS useEffect calls and function calls to communicate between client and server:\r\n\r\n// if(authStatus==true){\r\n  // useEffect(()=>{ //every render gets notes list from server, handles initial render on app load.\r\n   \r\n  //   console.log(\"initial GET req on login OR refresh page- emailFromAuth = \")\r\n  //  console.log(emailFromAuth)\r\n  //   //this get req returns an error on initial load bc the db query on server has no search parameter without posting a string here.\r\n  //   //CHANGED so that it returns empty array if err, so if emailFromAuth isn't pulled from sessionStorage, this will setNotes([])\r\n  //   axios.get(\"/api/practiceNotes\",{headers: {email:emailFromAuth}}) //is userProfile set at this point? NO. Need to sync this up with stateful var\r\n  //   .then((res)=>{ //awaits response from server....\r\n  //     console.log(res.data) \r\n  //    setNotes(res.data) //res.data is empty because our POST req on server isn't .save() correctly\r\n  //     // setNotes([]) //setNotes as [] to stop crashing temporarily\r\n  //     //console.log(\"res.data.allNotes arrives at client as:\")\r\n  //     //console.log(res.data.allNotes)\r\n  //     //console.log(\"notes is \")\r\n  //     //console.log(notes)\r\n  //   }) //will set notes to equal the value of the response from server, from db query\r\n  //   .catch((err)=>{\r\n  //     console.log(err)\r\n      \r\n  //   }) //handle error logging\r\n  //   // console.log(\"notes reset via setNotes. axios.get to server. notes array =\")\r\n  //   console.log(notes) //NOW is returning as empty array here.\r\n   \r\n  // },[]) //empty array is useEffect syntax\r\n\r\n  \r\n  //addNote function  AND EditNote function can contain our axios.post, sending the newly updated notes array to server\r\n  //every time its state changes. Can we use a simple use of useEffect hook to\r\n  // axios.post() to the server api endpoint on every setNotes() call? <<<<<<<<\r\n  //Yes we can:\r\n\r\n  //Works perfectly for add and delete, but NOT for edit. Bc we circumvented setNotes with shallowCopy. Will perform CRUD\r\n  //for session and axios.post from that function, after the point where notes is set correctly\r\n  useEffect(()=>{ //FIX: W/ conditional, initial GET w/ setNotes will NOT trigger this post.\r\n    if(notes.length > 0 && notes){ //i.e don't post on initial load when GET req calls setNotes. OR if login fails, leaving empty []\r\n      console.log(\"when posting in useEffect, notes ==\")\r\n      console.log(notes)\r\n    axios.post(\"/api/addNotes\",{\r\n      userEmail: emailFromAuth, //stateful variable\r\n      notes: notes\r\n    }).then((res)=>console.log(res.data))\r\n    sessionStorage.setItem(\"userData\",JSON.stringify({ //should sync session with what we send to DB\r\n      username: usernameFromAuth,\r\n    notes: notes,\r\n    email: emailFromAuth,\r\n    authStatus: true\r\n    })\r\n    )\r\n  // .then((res)=>setNotes(res.data)) \r\n  // .catch((err)=> console.log(err))\r\n  console.log(emailFromAuth)\r\n  console.log(\"useEffect detected setNotes update to notes. axios.post to server notes:\")\r\n  console.log(notes)\r\n    }\r\n  },[notes]) \r\n\r\n// } //conditional authStatus\r\n// else{ console.log(\"not logged in, axios not get/posting to server yet\")}\r\n\r\n  /*passing the state variable notes into the useEffect 2nd arg will call this function\r\n              // every time notes has a new state change in client (from add, delete, or edit)*/\r\n  \r\n               \r\n  function addNote(newNote){  \r\n  setNotes(prevNotes=>{\r\n    return [...prevNotes, newNote]\r\n  });\r\n  let tempArr = [];\r\n  \r\n  console.log(notes)\r\n  notes.forEach((entry)=>{\r\n    tempArr.push(entry)\r\n  })\r\n  console.log(\"tempArr\")\r\n  console.log(tempArr)\r\n  // axios.post(\"/api/addNotes\",tempArr)         //AXIOS CALL\r\n  // .catch((err)=>console.log(err))\r\n  // console.log(\"on addNote, we send the following via post from client to server:\")\r\n  // console.log(notes) \r\n  //is adding old version of notes prior to this setNotes call.\r\n  // So, the useState is BEHIND. Bc of async....\r\n  }\r\n\r\n\r\n\r\n  function deleteNote(id){\r\n setNotes(prevNotes=>{\r\n   return prevNotes.filter((noteItem,index)=>{\r\n     return index !== id\r\n   })\r\n  })\r\n  // axios.post(\"/api/addNotes\",notes)         //AXIOS CALL\r\n  // .catch((err)=>console.log(err))\r\n  }\r\n\r\n  \r\n//called when NOTE is clicked- look in <Note /> not NoteEditor\r\nfunction editNote(id,title,content){\r\n  console.log(\"editNote called\")\r\n    console.log(title) //these ARE logging successfully when editor opens...\r\n    console.log(content)\r\n    console.log(id)\r\n    setSelectedNote({\r\n      Id: id,\r\n      Title: title,\r\n      Content: content\r\n    })\r\n \r\n    console.log(\"selectedNote values are now: \")  //returning blank\r\n    console.log(selectedNote.Title)\r\n    console.log(selectedNote.Content)\r\n    setEditModeStatus(true)\r\n     \r\n  }\r\n//called when <NotedEditor add button is pressed.\r\n  function editComplete(edited){ //edited is from NoteEditor onEditSubmit\r\n    //console.log(edited) //edited IS logging and shows changes made in editor\r\n    //console.log(\"editComplete called\")\r\n    //console.log(edited.id) //IS now capturing id value\r\n\r\n    // axios.post(\"/api/addNotes\",notes)         //AXIOS CALL\r\n    // .catch((err)=>console.log(err))    \r\n\r\n      let shallowCopy = notes\r\n\r\n      shallowCopy = shallowCopy.map(function(entry,index){ //UPDATING SUCCESSFULLY\r\nif(index === edited.id){\r\nshallowCopy[index] = edited\r\n}else{\r\n    return entry\r\n  }\r\n  \r\n})\r\n\r\n    /* setNotes(shallowCopy)\r\n     if you setNotes HERE, it DOESN'T WORK */\r\n    setEditModeStatus(false)\r\n    //console.log(\"testtest 54321.. notes state = \")\r\n    \r\n    console.log(\"NOTES STATUS IN EDITCOMPLETE LINE 260  \")\r\n    console.log(notes) //THIS IS NOW UPDATED to match shallowCopy. try axios.post here\r\n    //manually inserting CRUD Op for edits, add/delete are detected by useEffect.\r\n    axios.post(\"/api/addNotes\",{\r\n      userEmail: emailFromAuth, //stateful variable\r\n      notes: notes\r\n    }).then((res)=>console.log(res.data))\r\n    sessionStorage.setItem(\"userData\",JSON.stringify({ //should sync session with what we send to DB\r\n      username: usernameFromAuth,\r\n    notes: notes,\r\n    email: emailFromAuth,\r\n    authStatus: true\r\n    })\r\n    ) //end CRUD insert\r\n    \r\n  }\r\n//Functional Components rendering\r\n\r\nfunction authStateFunction(loginStatusBoolFromAuth,valuePassedFromAuth,usernameFromAuth,emailFromAuth){\r\n    console.log(\"authStateFunction Called\")\r\n    // userProfile.email = emailFromAuth\r\n    // userProfile.username = usernameFromAuth\r\n    setUsernameFromAuth(usernameFromAuth)\r\n    setEmailFromAuth(emailFromAuth)\r\nsetNotes(valuePassedFromAuth)\r\nsetAuthStatus(loginStatusBoolFromAuth)\r\nlet userProfile = { //on login or registration, this object is set to sessionStorage. Keeps session & state consistent\r\n  username: usernameFromAuth,\r\n  email: emailFromAuth,\r\n    notes: valuePassedFromAuth,\r\n    authStatus: loginStatusBoolFromAuth\r\n}\r\nconsole.log(\"USERPROFILE:\")\r\nconsole.log(userProfile)\r\nuserProfile = JSON.stringify(userProfile)\r\nsessionStorage.setItem( \"userData\", userProfile )\r\n}\r\nconsole.log(notes)\r\n\r\nfunction logout(){\r\n  axios.get(\"/logout\",function(req,res){\r\n    req.logout;\r\n    // setAuthStatus(false)\r\n  })\r\n  sessionStorage.clear()\r\n  setNotes([])\r\n  setUsernameFromAuth(\"nameless user\")\r\n  setEmailFromAuth(\"no email\")\r\n  setAuthStatus(false)\r\n  // window.location.reload()\r\n}\r\n\r\n\r\n// function resetAuthTernaries(status,failed,registered){\r\n//   status=false\r\n//   failed=false\r\n//   registered=false\r\n// }\r\n\r\n  return (\r\n    <Router history = {history}>\r\n  <div>\r\n\r\n<Switch>\r\n\r\n\r\n\r\n<Route path=\"/PracticeRoute\">\r\n  <PracticeRoute />\r\n</Route>\r\n\r\n<Route path=\"/authenticate\">\r\n{authStatus && <Redirect from=\"/authenticate\" to=\"/\" /*WORKS*/ />} \r\n{/* This authStatus logic occurs at a DIFFERENT ROUTE. Need to have authStatus in <Auth>. It doesn't KNOW\r\nauthStatus changed, because it doesn't have authStatus over there EITHER:\r\nfigure out how to access the state across components\r\nOR make an analogous authStatus over on <Auth> */\r\n}\r\n{/* {authStatus && <Redirect from=\"/authenticate\" to=\"/PracticeRoute\"/> } NOT working...  */}\r\n  <Auth\r\n  id={\"Auth\"}\r\n   authFunction = {authStateFunction}\r\n  //  resetAuthTern= {resetAuthTernaries}\r\n   />\r\n </Route>\r\n\r\n<Route path= \"/\" >\r\n{console.log(authStatus)}\r\n{console.log(\"right above here is the authStatus full value..\")}\r\n {!authStatus && <Redirect from=\"/\" to=\"/authenticate\" /> /*WORKS*/} \r\n\r\n  {editModeStatus &&\r\n  <div>\r\n  <Header\r\n    headerText=\"Edit Note\"\r\n    logout={logout}\r\n    userNameGreeting={usernameFromAuth}\r\n  />\r\n  <NoteEditor \r\n  \r\n  populateId= {selectedNote.Id} //THIS wasn't included before, causing map function to fail.\r\n  populateTitle={selectedNote.Title}\r\n  populateContent={selectedNote.Content} //THESE are getting pulled from the editedNote state via props from NoteEditor\r\n  onEditSubmit={editComplete} // this calls editComplete, passing in the arg from NoteEditor\r\n/>\r\n</div>\r\n  }\r\n\r\n{!editModeStatus &&\r\n\r\n<div>\r\n{/* {console.log(\"notes array looks like this before rendering, after submitting edit:\")}\r\n{console.log(notes)} */}\r\n\r\n<Header \r\nheaderText=\"Notepad\"\r\nuserNameGreeting={usernameFromAuth}\r\nlogout={logout}\r\n/>\r\n<CreateArea \r\nonAdd={addNote} \r\n/> \r\n{notes.map((noteItem,index)=>{\r\n  //console.log(\"Notes inside map function down in render section\")\r\n  //console.log(notes) //The notes array is updated successfully....\r\n  \r\nreturn <Note \r\nkey={index}\r\nid={index} //SO ANY NOTE THAT WAS EDITED will now render as the most recently edited note. Hm..\r\ntitle={!noteItem ? \"edit value didn't carry over\" : noteItem.title} //see notes learned about asynchronous population of arrays in react\r\ncontent={!noteItem ? \"something wrong w/ notes array\" : noteItem.content}//if noteItem.title/content not yet populated, this lets the app nopt crash before it finishes rendering bc it's asynchronous.\r\nonDelete={deleteNote}\r\nonEdit={editNote}\r\n/>\r\n})\r\n\r\n}\r\n{/* {console.log(\"Finished Render/map. Notes array is:\")}\r\n{console.log(notes)}  */}\r\n\r\n<Footer />\r\n</div>\r\n}\r\n\r\n</Route>\r\n\r\n</Switch>\r\n\r\n</div>\r\n</Router>\r\n)\r\n}\r\n\r\nexport default App;\r\n\r\n","\r\n\r\nimport React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport App from \"./Components/App\"\r\nReactDOM.render(\r\n    <App/>,\r\n    document.getElementById(\"root\")\r\n)"],"sourceRoot":""}